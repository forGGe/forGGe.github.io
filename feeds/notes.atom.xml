<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>forGGe's Nexus - notes</title><link href="https://forgge.github.io/" rel="alternate"></link><link href="https://forgge.github.io/feeds/notes.atom.xml" rel="self"></link><id>https://forgge.github.io/</id><updated>2018-03-26T00:00:00+03:00</updated><entry><title>How to control header include from command line in GCC</title><link href="https://forgge.github.io/gcc-how-to-control-header-include-from-command-line.html" rel="alternate"></link><published>2018-03-26T00:00:00+03:00</published><updated>2018-03-26T00:00:00+03:00</updated><author><name>Max</name></author><id>tag:forgge.github.io,2018-03-26:/gcc-how-to-control-header-include-from-command-line.html</id><summary type="html">&lt;p&gt;In following sections, I will describe how to control which header must be
included in your source files via command-line parameters of GCC.&lt;/p&gt;
&lt;div class="section" id="the-case"&gt;
&lt;h2&gt;The Case&lt;/h2&gt;
&lt;p&gt;Imagine that you have a simple application, consisting of just two files:&lt;/p&gt;
&lt;p&gt;One &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;foo.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In following sections, I will describe how to control which header must be
included in your source files via command-line parameters of GCC.&lt;/p&gt;
&lt;div class="section" id="the-case"&gt;
&lt;h2&gt;The Case&lt;/h2&gt;
&lt;p&gt;Imagine that you have a simple application, consisting of just two files:&lt;/p&gt;
&lt;p&gt;One &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;foo.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and one &lt;tt class="docutils literal"&gt;foo.h&lt;/tt&gt; header file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef FOO_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define FOO_H_&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I am Foo!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If to compile that code and run an executable you will obviously get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc main.c
$ ./a.out
I am Foo!
&lt;/pre&gt;
&lt;p&gt;Now, suppose that for a some unknown reason, you have decided to make your
application &lt;strong&gt;configurable at compile-time&lt;/strong&gt;.&lt;/p&gt;
&lt;p id="extended-header"&gt;&lt;span id="the-extended-header"&gt;&lt;/span&gt;So you want to add one more header (we will discuss its name a bit later)
with the same function signature inside, but with a different behavior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef EXTENDED_FOO_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define EXTENDED_FOO_H_&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I am extended Foo! I can do more!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we got to the crucial point. How to control which header should be included?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="method-0-using-include-directories"&gt;
&lt;span id="include-directories"&gt;&lt;/span&gt;&lt;h2&gt;Method 0: Using include directories&lt;/h2&gt;
&lt;p&gt;Probably, the most common used approach. All you need to do is to arrange
your project files like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.
├── headers
│&amp;nbsp;&amp;nbsp; └── foo.h
├── extended_headers
│&amp;nbsp;&amp;nbsp; └── foo.h
└── main.c
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;extended_headers/foo.h&lt;/tt&gt; file is &lt;a class="reference internal" href="#the-extended-header"&gt;the extended header&lt;/a&gt; we discussed
a few moments ago.&lt;/p&gt;
&lt;p&gt;And then call GCC with a respective &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-I&lt;/span&gt;&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;If the first header must be included:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -I./headers main.c
$ ./a.out
I am Foo!
&lt;/pre&gt;
&lt;p&gt;In case if the second header is required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -I./extended_headers main.c
$ ./a.out
I am extended Foo! I can do more!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="method-1-define-a-macro-switch"&gt;
&lt;h2&gt;Method 1: Define a macro switch&lt;/h2&gt;
&lt;p&gt;Also a common approach. Use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/tt&gt; GCC flag to define a macro with a value
that maps to the required header. The &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; file must be then modified to
make use of that macro.&lt;/p&gt;
&lt;p&gt;To proceed with this method, let's change a bit a structure of our project:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.
├── extended_foo.h
├── foo.h
└── main.c
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;extended_foo.h&lt;/tt&gt; is our &lt;a class="reference internal" href="#extended-header"&gt;extended header&lt;/a&gt; we discussed earlier.&lt;/p&gt;
&lt;p&gt;Thus, the &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; file will look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#if USE_HEADER == 1&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;foo.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#elif USE_HEADER == 2&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;extended_foo.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And GCC must be called in following ways.&lt;/p&gt;
&lt;p&gt;If the first header must be included:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -DUSE_HEADER=1 main.c
$ ./a.out
I am Foo!
&lt;/pre&gt;
&lt;p&gt;In case if the second header is required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -DUSE_HEADER=2 main.c
$ ./a.out
I am extended Foo! I can do more!
&lt;/pre&gt;
&lt;p&gt;This approach has obvious disadvantage. If more headers must to be added,
the &lt;tt class="docutils literal"&gt;#if .. #endif&lt;/tt&gt; section will grow too. This somewhat pollutes code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="method-2-define-a-header-file-name"&gt;
&lt;h2&gt;Method 2: Define a header file name&lt;/h2&gt;
&lt;p&gt;According to &lt;a class="reference external" href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf"&gt;the C standard&lt;/a&gt; (C99 6.10.2#4), following construct is totally legit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define USE_HEADER &amp;quot;foo.h&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;USE_HEADER&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, we can define a header name via &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/tt&gt; parameter and use it in &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Using the source tree from the &lt;a class="reference internal" href="#method-1-define-a-macro-switch"&gt;Method 1: Define a macro switch&lt;/a&gt; section,
our &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; can be shaped like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;USE_HEADER&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The invocation of GCC is a little bit tricky. We need to pass both header
file name and surrounding quotes, too.&lt;/p&gt;
&lt;p&gt;If the first header file must be included:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -DUSE_HEADER=&amp;quot;\&amp;quot;foo.h\&amp;quot;&amp;quot; main.c
$ ./a.out
I am Foo!
&lt;/pre&gt;
&lt;p&gt;In case if the second header is required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -DUSE_HEADER=&amp;quot;\&amp;quot;extended_foo.h\&amp;quot;&amp;quot; main.c
$ ./a.out
I am extended Foo! I can do more!
&lt;/pre&gt;
&lt;p&gt;Note that the outermost pair of quotes is required if your header file name
contains spaces or characters that should be escaped.&lt;/p&gt;
&lt;p&gt;Also, you can use &lt;tt class="docutils literal"&gt;&amp;lt; &amp;gt;&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;&amp;quot; &amp;quot;&lt;/tt&gt; when defining a header name.
E.g. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-DUSE_HEADER=&amp;quot;&amp;lt;foo.h&amp;gt;&amp;quot;&lt;/span&gt;&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-DUSE_HEADER=&amp;quot;\&amp;quot;foo.h\&amp;quot;&amp;quot;&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="method-3-define-a-header-file-name-without-annoying-escaping"&gt;
&lt;h2&gt;Method 3: Define a header file name without annoying escaping&lt;/h2&gt;
&lt;p&gt;Previous approach has introduced some mess with &lt;tt class="docutils literal"&gt;\&amp;quot;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/tt&gt; in the GCC
invocation.&lt;/p&gt;
&lt;p&gt;What if we just want to pass a plain header name?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc -DUSE_HEADER=foo.h main.c
&lt;/pre&gt;
&lt;p&gt;For this to work, we can use &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html"&gt;the stringizing trick&lt;/a&gt;. The stringizing is a way
to convert a macro name to a string.&lt;/p&gt;
&lt;p&gt;Let's use that trick in &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; (provided the source code tree is
the same as in &lt;a class="reference internal" href="#method-2-define-a-header-file-name"&gt;Method 2: Define a header file name&lt;/a&gt; section):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define XSTR(s) STR(s)&lt;/span&gt;
&lt;span class="cp"&gt;#define STR(s) #s&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;STR(USE_HEADER)&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, calling the GCC will be a bit simpler.&lt;/p&gt;
&lt;p&gt;If the first header must be included:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -DUSE_HEADER=foo.h main.c
$ ./a.out
I am Foo!
&lt;/pre&gt;
&lt;p&gt;In case if the second header is required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -DUSE_HEADER=extended_foo.h main.c
$ ./a.out
I am extended Foo! I can do more!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="method-4-gcc-include-option"&gt;
&lt;h2&gt;Method 4: GCC &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-include&lt;/span&gt;&lt;/tt&gt; option&lt;/h2&gt;
&lt;p&gt;Pretty exotic option.&lt;/p&gt;
&lt;p&gt;You need to specify required header in  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-include&lt;/span&gt;&lt;/tt&gt; option via command line.
According to &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html"&gt;the GCC Preprocessor Options&lt;/a&gt;:&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;-include file&lt;/p&gt;
&lt;p&gt;Process file as if #include &amp;quot;file&amp;quot; appeared as the first line of the primary
source file. However, the first directory searched for file is the
preprocessor’s working directory instead of the directory containing
the main source file. If not found there, it is searched for in the
remainder of the #include &amp;quot;…&amp;quot; search chain as normal.&lt;/p&gt;
&lt;p&gt;If multiple -include options are given, the files are included in the order
they appear on the command line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; becomes almost empty:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if the first header must be included:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc --include=foo.h main.c
$ ./a.out
I am Foo!
&lt;/pre&gt;
&lt;p&gt;In case if the second header is required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc --include=extended_foo.h main.c
$ ./a.out
I am extended Foo! I can do more!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="relevant-references"&gt;
&lt;h2&gt;Relevant references&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/eclipse/paho.mqtt.embedded-c/blob/master/MQTTClient-C/src/MQTTClient.h#L39"&gt;Paho MQTT Client library using stringizing trick to include user-provided header&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/6089310/why-does-gcc-have-a-include-option"&gt;Why --include option?&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="c"></category><category term="c++"></category><category term="gcc"></category></entry></feed>